/*
 * This configuration is used by the com.sun.jini.start utility to start a
 * ProvisionMonitor, Cybernode, Webster, JMX Connector Service and
 * a Jini Lookup Service
 */
import java.net.URL;
import org.rioproject.boot.BootUtil;
import org.rioproject.boot.ServiceDescriptorUtil;
import com.sun.jini.config.ConfigUtil;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.start.NonActivatableServiceDescriptor;


com.sun.jini.start {
	jiniLibPath = "${JINI_HOME}${/}lib";
	jiniLibDLPath = "${JINI_HOME}${/}lib-dl";
	rioLibPath = "${RIO_HOME}${/}lib";
	deployDir = "${RIO_HOME}${/}deploy";
	policy = "${RIO_HOME}${/}policy${/}policy.all";
	port = "9010";

	reggieConfig = "${RIO_HOME}${/}config${/}reggie.config";
	monitorConfig = "${RIO_HOME}${/}config/monitor.config";
	cybernodeConfig = "${RIO_HOME}${/}config${/}cybernode.config";

	private static basecodebase = "http://" + ConfigUtil.getHostName() + ":" + port + "/";
	
	private static mahaloCodebase=ConfigUtil.concat(new Object[] {
            basecodebase + "/mahalo-dl.jar ",
            basecodebase + "/jsk-dl.jar"}
	);
	private static mahaloClasspath="${JINI_HOME}${/}lib/mahalo.jar";
	private static mahaloConfig = "${RIO_HOME}${/}config${/}mahalo.config";
	
	private static blitzCodebase = basecodebase + "blitz-dl.jar " + basecodebase + "jsk-dl.jar";
	private static blitzClasspath = "${RIO_HOME}/lib/jsk-lib.jar;${RIO_HOME}/lib/sun-util.jar;${RIO_HOME}/lib/je.jar;${RIO_HOME}/lib/backport-util-concurrent60.jar;${RIO_HOME}/lib/blitz.jar";
	private static blitzConfig = "${RIO_HOME}${/}config${/}blitz.config";

	private static outriggerCodebase = basecodebase + "outrigger-dl.jar " + basecodebase + "jsk-dl.jar"; 
	private static outriggerClasspath = "${RIO_HOME}/lib/outrigger.jar;${RIO_HOME}/lib/apache-river/lib/outrigger-snaplogstore.jar";
	private static outriggerConfig = "${RIO_HOME}${/}config${/}persistent-outrigger.config";

	serviceDescriptors = new ServiceDescriptor[] {
		// Rio Webster, set to serve up 4 directories
		ServiceDescriptorUtil.getWebster(
			policy,
			port,
			new String[] {jiniLibPath,";",jiniLibDLPath,";",rioLibPath,";",deployDir}
		),

		// Jini Lookup Service
		ServiceDescriptorUtil.getLookup(policy, reggieConfig),

		// Rio Provision Monitor
		ServiceDescriptorUtil.getMonitor(policy, monitorConfig),

		// Rio Cybernode
		ServiceDescriptorUtil.getCybernode(policy, cybernodeConfig),

		// Jini Transaction Manager
		new NonActivatableServiceDescriptor(
			mahaloCodebase, 
			policy, 
			mahaloClasspath,
			"com.sun.jini.mahalo.TransientMahaloImpl",
			new String[] { mahaloConfig }
		),
/*
		// Outrigger Java Space
		new NonActivatableServiceDescriptor(
    		outriggerCodebase, 
			policy, 
			outriggerClasspath,
    		"com.sun.jini.outrigger.PersistentOutriggerImpl",
    		new String[] { outriggerConfig }
		)
*/
		// Blitz
		new NonActivatableServiceDescriptor(
			blitzCodebase, 
			policy, 
			blitzClasspath,
			"org.dancres.blitz.remote.BlitzServiceImpl",
			new String[] { blitzConfig }
		)
	};    

}

