#!/bin/bash
#
# This script provides the command and control utility for starting
# Rio services and the Rio command line interface.
#
# This script also sets the environment to download native libraries from
# the $RIO_HOME/lib/native directory.

scriptDir="$(dirname $0)"
scriptName=`basename "$0"`
scriptPath="$scriptDir/$scriptName"
command_line=$*
start=

if [ "$1" = "start" ]; then
    start=1
    shift
    command_line=$*
fi

# Set local variables
if [ -z "$RIO_HOME" ] ; then
  RIO_HOME="$scriptDir/.."
fi

# Convert to absolute path
RIO_HOME=$(cd "$RIO_HOME" && pwd)

RIO_LIB=$RIO_HOME/lib

# Check JINI_HOME
if [ -z "$JINI_HOME" ] ; then
    if [ -e "$RIO_HOME/lib/apache-river" ] ; then
        JINI_HOME=$RIO_HOME/lib/apache-river
    else
        echo "Cannot locate expected Jini (River) distribution, either set JINI_HOME or download Rio with dependencies, exiting"
	    exit 1
    fi
fi
JINI_LIB=$JINI_HOME/lib

# Check for JAVA_HOME
if [ -z "$JAVA_HOME" ] ; then
    JAVACMD=java
else
    JAVACMD="$JAVA_HOME/bin/java"
fi

# Function to find a file
getStarterConfig() {
    service="$1"
    if [ -f "$RIO_HOME/config/start-$service.config" ] ; then
	   starterConfig="$RIO_HOME/config/start-$service.config"
    else
	    echo "Cannot locate expected service starter file [start-$service.config] in [$RIO_HOME/config], exiting"
	    exit 1
    fi
}

cygwin=
case $OS in
    Windows*)
        cygwin=1
esac

# Check to see if path conversion is needed
toNative() {
    # Check for Cygwin
    case $OS in
        Windows*)
           toWindows "$@";;
           *) echo $* ;;
    esac
}

# Cygwin utility to convert path if running under windows
toWindows() {
    cygpath -pw "$@"
}


#DEBUG=-Dorg.rioproject.tools.webster.debug
#NETWORK=-Djava.rmi.server.hostname=130.0.0.1
if [ -z "$NET_ADDR" ] ; then
    NETWORK="-Djava.rmi.server.hostname="`hostname`
else
  NETWORK="-Djava.rmi.server.hostname="$NET_ADDR
fi
#echo $NETWORK

if [ -z "$JAVA_MEM_OPTIONS" ] ; then
    JAVA_MEM_OPTIONS="-Xms8m -Xmx256m"
fi

if [ -z "$JAVA_RMI_OPTIONS" ] ; then
  #  JAVA_RMI_OPTIONS="-Dsun.rmi.transport.tcp.handshakeTimeout=180000"
    JAVA_RMI_OPTIONS=""
fi

if [ -z "$JAVA_GC_OPTIONS" ] ; then
    #JAVA_GC_OPTIONS="-XX:+UseConcMarkSweepGC -XX:+AggressiveOpts"
    JAVA_GC_OPTIONS=""
fi

# If the command is to start the Rio services, invoke the ServiceStarter
# Otherwise invoke the CLI
if [ "$start" = "1" ]; then
    RIO_NATIVE_DIR="$(toNative $RIO_LIB/native)"
    # Check for running on OS/X
    opSys=`uname -s`
    if [ $opSys = "Darwin" ] ; then
        export DYLD_LIBRARY_PATH=$RIO_NATIVE_DIR:$DYLD_LIBRARY_PATH
        libpath="-Djava.library.path=$DYLD_LIBRARY_PATH"
    else
        if [ "$cygwin" = "1" ] ; then
            libpath="-Djava.library.path=$RIO_NATIVE_DIR"
        else
            export LD_LIBRARY_PATH=$RIO_NATIVE_DIR:$LD_LIBRARY_PATH
            libpath="-Djava.library.path=$RIO_NATIVE_DIR"
        fi
    fi

    classpath="-cp $(toNative $RIO_LIB/boot.jar:$JINI_LIB/start.jar:$JAVA_HOME/lib/tools.jar)"
    agentpath="-javaagent:$(toNative $RIO_LIB/boot.jar)"
    launchTarget=com.sun.jini.start.ServiceStarter
    if [ -z "$1" ] ; then
        echo "A service to start is required, exiting"
        exit 1
    else
        starter_arg=$1
        getStarterConfig $1
        echo "starter config [$starterConfig]"
        shift
        command_line=$*
    fi
    ARGS="$starter_arg $command_line"
    ""$JAVACMD"" -server $JAVA_MEM_OPTIONS $JAVA_RMI_OPTIONS $JAVA_GC_OPTIONS \
        $classpath $agentpath $libpath $RIO_OPTS \
        -Djava.security.policy=$RIO_HOME/policy/policy.all \
        -Djava.protocol.handler.pkgs=net.jini.url \
        -DRIO_HOME=$RIO_HOME \
        -Dorg.rioproject.home=$RIO_HOME \
        -DRIO_NATIVE_DIR=$RIO_NATIVE_DIR \
        -DJINI_HOME=$JINI_HOME \
        -DRIO_LOG_DIR=$RIO_HOME/logs/ \
        -Drio.script.path="$scriptPath" \
        -Drio.script.args="$ARGS" \
        $USER_OPTS \
        $NETWORK $DEBUG $launchTarget $starterConfig $command_line
else
    # Set system properties
    PROPS="-DRIO_HOME=$RIO_HOME -DJINI_HOME=$JINI_HOME"
    #cliExt="$RIO_HOME/config/rio-cli.config"
    cliExt=""
    launchTarget=org.rioproject.tools.cli.CLI
    classpath="-cp $(toNative $RIO_LIB/rio-cli.jar:$RIO_LIB/rio.jar:$JINI_LIB/jsk-lib.jar:$JINI_LIB/jsk-platform.jar:$RIO_LIB/spring/spring.jar:$RIO_LIB/jakarta-commons/commons-logging.jar:groovy-all-1.6-RC-1.jar)"
    "$JAVACMD" $classpath $JAVA_MEM_OPTIONS  $RIO_OPTS \
        -Djava.security.policy=$RIO_HOME/policy/policy.all \
        $PROPS \
        $NETWORK \
        $DEBUG \
        $USER_OPTS \
        $launchTarget $cliExt $command_line
fi
